"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

# type Query {
#     users: [User!]! @paginate(type: "paginator" model: "App\\User")
#     user(id: ID @eq): User @find(model: "App\\User")
#     article(id: ID @eq): Article @find(model: "App\\Article")
# }

# type User {
#     id: ID!
#     name: String!
#     email: String!
#     created_at: DateTime!
#     updated_at: DateTime!
    
#   articles: [Article!]! @hasMany
# }
type User {
  id: ID!
  name: String!
  email: String!
  articles: [Article!]! @hasMany
}

type Article {
  id: ID!
  title: String!
  content: String!
  author: User! @belongsTo(relation: "user")
}
type Query {
  user(id: ID! @eq): User @find
  # users: [User!]! @all
  users: [User!]! @paginate
  article(id: ID! @eq): Article @find
  articles: [Article!]! @paginate
  me: User @auth(guard: "api")
}

type UserPaginator {
  paginatorInfo: PaginatorInfo!
  data: [User!]!
}

type PaginatorInfo {
  count: Int!
  currentPage: Int!
  firstItem: Int
  hasMorePages: Boolean!
  lastItem: Int
  lastPage: Int!
  perPage: Int!
  total: Int!
}

type Mutation {
  createUser(
    name: String!
    email: String! @rules(apply: ["email", "unique:users"])
    password: String! @bcrypt @rules(apply: ["min:6"])
  ): User @create
  
  login(
    email: String! 
    password: String!
  ): String @field(resolver: "AuthMutator@resolve")

  createArticle(title: String!, content: String!): Article 
    @field(resolver: "ArticleMutator@create")
    @middleware(checks: ["auth:api"])
}